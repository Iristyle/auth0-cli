// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/logger0.proto

package logger0

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on LogRecord with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *LogRecord) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Tenant

	// no validation rules for Metadata

	return nil
}

// LogRecordValidationError is the validation error returned by
// LogRecord.Validate if the designated constraints aren't met.
type LogRecordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogRecordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogRecordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogRecordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogRecordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogRecordValidationError) ErrorName() string { return "LogRecordValidationError" }

// Error satisfies the builtin error interface
func (e LogRecordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogRecord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogRecordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogRecordValidationError{}

// Validate checks the field values on Drain with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Drain) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Tenant

	if v, ok := interface{}(m.GetSink()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DrainValidationError{
				field:  "Sink",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DrainValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DrainValidationError is the validation error returned by Drain.Validate if
// the designated constraints aren't met.
type DrainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DrainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DrainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DrainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DrainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DrainValidationError) ErrorName() string { return "DrainValidationError" }

// Error satisfies the builtin error interface
func (e DrainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDrain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DrainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DrainValidationError{}

// Validate checks the field values on Session with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Session) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Tenant

	for idx, item := range m.GetFilters() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionValidationError{
					field:  fmt.Sprintf("Filters[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SessionValidationError is the validation error returned by Session.Validate
// if the designated constraints aren't met.
type SessionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionValidationError) ErrorName() string { return "SessionValidationError" }

// Error satisfies the builtin error interface
func (e SessionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSession.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionValidationError{}

// Validate checks the field values on Filter with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Filter) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Key

	// no validation rules for Val

	return nil
}

// FilterValidationError is the validation error returned by Filter.Validate if
// the designated constraints aren't met.
type FilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FilterValidationError) ErrorName() string { return "FilterValidationError" }

// Error satisfies the builtin error interface
func (e FilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FilterValidationError{}

// Validate checks the field values on Sink with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Sink) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Target.(type) {

	case *Sink_Url:
		// no validation rules for Url

	}

	return nil
}

// SinkValidationError is the validation error returned by Sink.Validate if the
// designated constraints aren't met.
type SinkValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SinkValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SinkValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SinkValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SinkValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SinkValidationError) ErrorName() string { return "SinkValidationError" }

// Error satisfies the builtin error interface
func (e SinkValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSink.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SinkValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SinkValidationError{}
