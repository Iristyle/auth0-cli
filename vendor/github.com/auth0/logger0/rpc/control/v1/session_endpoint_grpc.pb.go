// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package controlv1

import (
	context "context"
	logger0 "github.com/auth0/logger0"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SessionEndpointClient is the client API for SessionEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionEndpointClient interface {
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (SessionEndpoint_CreateSessionClient, error)
}

type sessionEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionEndpointClient(cc grpc.ClientConnInterface) SessionEndpointClient {
	return &sessionEndpointClient{cc}
}

func (c *sessionEndpointClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (SessionEndpoint_CreateSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &SessionEndpoint_ServiceDesc.Streams[0], "/auth0.logger0.control.v1.SessionEndpoint/CreateSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionEndpointCreateSessionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SessionEndpoint_CreateSessionClient interface {
	Recv() (*logger0.LogRecord, error)
	grpc.ClientStream
}

type sessionEndpointCreateSessionClient struct {
	grpc.ClientStream
}

func (x *sessionEndpointCreateSessionClient) Recv() (*logger0.LogRecord, error) {
	m := new(logger0.LogRecord)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionEndpointServer is the server API for SessionEndpoint service.
// All implementations must embed UnimplementedSessionEndpointServer
// for forward compatibility
type SessionEndpointServer interface {
	CreateSession(*CreateSessionRequest, SessionEndpoint_CreateSessionServer) error
	mustEmbedUnimplementedSessionEndpointServer()
}

// UnimplementedSessionEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedSessionEndpointServer struct {
}

func (UnimplementedSessionEndpointServer) CreateSession(*CreateSessionRequest, SessionEndpoint_CreateSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionEndpointServer) mustEmbedUnimplementedSessionEndpointServer() {}

// UnsafeSessionEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionEndpointServer will
// result in compilation errors.
type UnsafeSessionEndpointServer interface {
	mustEmbedUnimplementedSessionEndpointServer()
}

func RegisterSessionEndpointServer(s grpc.ServiceRegistrar, srv SessionEndpointServer) {
	s.RegisterService(&SessionEndpoint_ServiceDesc, srv)
}

func _SessionEndpoint_CreateSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CreateSessionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SessionEndpointServer).CreateSession(m, &sessionEndpointCreateSessionServer{stream})
}

type SessionEndpoint_CreateSessionServer interface {
	Send(*logger0.LogRecord) error
	grpc.ServerStream
}

type sessionEndpointCreateSessionServer struct {
	grpc.ServerStream
}

func (x *sessionEndpointCreateSessionServer) Send(m *logger0.LogRecord) error {
	return x.ServerStream.SendMsg(m)
}

// SessionEndpoint_ServiceDesc is the grpc.ServiceDesc for SessionEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth0.logger0.control.v1.SessionEndpoint",
	HandlerType: (*SessionEndpointServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateSession",
			Handler:       _SessionEndpoint_CreateSession_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/control/v1/session_endpoint.proto",
}
