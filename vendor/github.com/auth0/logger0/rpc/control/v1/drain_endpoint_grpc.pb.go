// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package controlv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DrainEndpointClient is the client API for DrainEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DrainEndpointClient interface {
	ListDrains(ctx context.Context, in *ListDrainsRequest, opts ...grpc.CallOption) (*ListDrainsResponse, error)
	CreateDrain(ctx context.Context, in *CreateDrainRequest, opts ...grpc.CallOption) (*CreateDrainResponse, error)
	UpdateDrain(ctx context.Context, in *UpdateDrainRequest, opts ...grpc.CallOption) (*UpdateDrainResponse, error)
	DeleteDrain(ctx context.Context, in *DeleteDrainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type drainEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewDrainEndpointClient(cc grpc.ClientConnInterface) DrainEndpointClient {
	return &drainEndpointClient{cc}
}

func (c *drainEndpointClient) ListDrains(ctx context.Context, in *ListDrainsRequest, opts ...grpc.CallOption) (*ListDrainsResponse, error) {
	out := new(ListDrainsResponse)
	err := c.cc.Invoke(ctx, "/auth0.logger0.control.v1.DrainEndpoint/ListDrains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainEndpointClient) CreateDrain(ctx context.Context, in *CreateDrainRequest, opts ...grpc.CallOption) (*CreateDrainResponse, error) {
	out := new(CreateDrainResponse)
	err := c.cc.Invoke(ctx, "/auth0.logger0.control.v1.DrainEndpoint/CreateDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainEndpointClient) UpdateDrain(ctx context.Context, in *UpdateDrainRequest, opts ...grpc.CallOption) (*UpdateDrainResponse, error) {
	out := new(UpdateDrainResponse)
	err := c.cc.Invoke(ctx, "/auth0.logger0.control.v1.DrainEndpoint/UpdateDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drainEndpointClient) DeleteDrain(ctx context.Context, in *DeleteDrainRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/auth0.logger0.control.v1.DrainEndpoint/DeleteDrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DrainEndpointServer is the server API for DrainEndpoint service.
// All implementations must embed UnimplementedDrainEndpointServer
// for forward compatibility
type DrainEndpointServer interface {
	ListDrains(context.Context, *ListDrainsRequest) (*ListDrainsResponse, error)
	CreateDrain(context.Context, *CreateDrainRequest) (*CreateDrainResponse, error)
	UpdateDrain(context.Context, *UpdateDrainRequest) (*UpdateDrainResponse, error)
	DeleteDrain(context.Context, *DeleteDrainRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedDrainEndpointServer()
}

// UnimplementedDrainEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedDrainEndpointServer struct {
}

func (UnimplementedDrainEndpointServer) ListDrains(context.Context, *ListDrainsRequest) (*ListDrainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDrains not implemented")
}
func (UnimplementedDrainEndpointServer) CreateDrain(context.Context, *CreateDrainRequest) (*CreateDrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrain not implemented")
}
func (UnimplementedDrainEndpointServer) UpdateDrain(context.Context, *UpdateDrainRequest) (*UpdateDrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDrain not implemented")
}
func (UnimplementedDrainEndpointServer) DeleteDrain(context.Context, *DeleteDrainRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDrain not implemented")
}
func (UnimplementedDrainEndpointServer) mustEmbedUnimplementedDrainEndpointServer() {}

// UnsafeDrainEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DrainEndpointServer will
// result in compilation errors.
type UnsafeDrainEndpointServer interface {
	mustEmbedUnimplementedDrainEndpointServer()
}

func RegisterDrainEndpointServer(s grpc.ServiceRegistrar, srv DrainEndpointServer) {
	s.RegisterService(&DrainEndpoint_ServiceDesc, srv)
}

func _DrainEndpoint_ListDrains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDrainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainEndpointServer).ListDrains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth0.logger0.control.v1.DrainEndpoint/ListDrains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainEndpointServer).ListDrains(ctx, req.(*ListDrainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainEndpoint_CreateDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainEndpointServer).CreateDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth0.logger0.control.v1.DrainEndpoint/CreateDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainEndpointServer).CreateDrain(ctx, req.(*CreateDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainEndpoint_UpdateDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainEndpointServer).UpdateDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth0.logger0.control.v1.DrainEndpoint/UpdateDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainEndpointServer).UpdateDrain(ctx, req.(*UpdateDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DrainEndpoint_DeleteDrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DrainEndpointServer).DeleteDrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth0.logger0.control.v1.DrainEndpoint/DeleteDrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DrainEndpointServer).DeleteDrain(ctx, req.(*DeleteDrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DrainEndpoint_ServiceDesc is the grpc.ServiceDesc for DrainEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DrainEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth0.logger0.control.v1.DrainEndpoint",
	HandlerType: (*DrainEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListDrains",
			Handler:    _DrainEndpoint_ListDrains_Handler,
		},
		{
			MethodName: "CreateDrain",
			Handler:    _DrainEndpoint_CreateDrain_Handler,
		},
		{
			MethodName: "UpdateDrain",
			Handler:    _DrainEndpoint_UpdateDrain_Handler,
		},
		{
			MethodName: "DeleteDrain",
			Handler:    _DrainEndpoint_DeleteDrain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/control/v1/drain_endpoint.proto",
}
