// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ingressv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogEndpointClient is the client API for LogEndpoint service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogEndpointClient interface {
	Post(ctx context.Context, in *PostLogRequest, opts ...grpc.CallOption) (*PostLogResponse, error)
}

type logEndpointClient struct {
	cc grpc.ClientConnInterface
}

func NewLogEndpointClient(cc grpc.ClientConnInterface) LogEndpointClient {
	return &logEndpointClient{cc}
}

func (c *logEndpointClient) Post(ctx context.Context, in *PostLogRequest, opts ...grpc.CallOption) (*PostLogResponse, error) {
	out := new(PostLogResponse)
	err := c.cc.Invoke(ctx, "/auth0.logger0.ingress.v1.LogEndpoint/Post", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogEndpointServer is the server API for LogEndpoint service.
// All implementations must embed UnimplementedLogEndpointServer
// for forward compatibility
type LogEndpointServer interface {
	Post(context.Context, *PostLogRequest) (*PostLogResponse, error)
	mustEmbedUnimplementedLogEndpointServer()
}

// UnimplementedLogEndpointServer must be embedded to have forward compatible implementations.
type UnimplementedLogEndpointServer struct {
}

func (UnimplementedLogEndpointServer) Post(context.Context, *PostLogRequest) (*PostLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Post not implemented")
}
func (UnimplementedLogEndpointServer) mustEmbedUnimplementedLogEndpointServer() {}

// UnsafeLogEndpointServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogEndpointServer will
// result in compilation errors.
type UnsafeLogEndpointServer interface {
	mustEmbedUnimplementedLogEndpointServer()
}

func RegisterLogEndpointServer(s grpc.ServiceRegistrar, srv LogEndpointServer) {
	s.RegisterService(&LogEndpoint_ServiceDesc, srv)
}

func _LogEndpoint_Post_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogEndpointServer).Post(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth0.logger0.ingress.v1.LogEndpoint/Post",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogEndpointServer).Post(ctx, req.(*PostLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LogEndpoint_ServiceDesc is the grpc.ServiceDesc for LogEndpoint service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LogEndpoint_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth0.logger0.ingress.v1.LogEndpoint",
	HandlerType: (*LogEndpointServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Post",
			Handler:    _LogEndpoint_Post_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/ingress/v1/log_endpoint.proto",
}
